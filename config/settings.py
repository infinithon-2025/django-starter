"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env()
environ.Env.read_env(BASE_DIR / ".env")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("DJANGO_SECRET_KEY", default="dev-secret-key-change-me")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DJANGO_DEBUG", default=True)

ALLOWED_HOSTS = env.list("DJANGO_ALLOWED_HOSTS", default=["*"])

# CORS 설정
# 개발 환경에서는 모든 오리진 허용
CORS_ALLOW_ALL_ORIGINS = True
CORS_ALLOW_CREDENTIALS = True

# 디버그 모드에서 CORS 로깅 활성화
CORS_URLS_REGEX = r'^.*$'

# 추가 CORS 설정
CORS_ORIGIN_ALLOW_ALL = True  # 모든 오리진 허용 (레거시 설정)
CORS_ORIGIN_WHITELIST = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
    "http://localhost:5173",
    "http://127.0.0.1:5173",
]

# 특정 오리진만 허용하려면 아래 설정 사용 (프로덕션 환경)
# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",
#     "http://127.0.0.1:3000",
#     "http://localhost:8080",
#     "http://127.0.0.1:8080",
#     "http://localhost:5173",  # Vite 기본 포트
#     "http://127.0.0.1:5173",
# ]

# 추가 CORS 설정 (CORS_ALLOW_ALL_ORIGINS가 True일 때는 무시됨)
# CORS_ALLOWED_ORIGIN_REGEXES = [
#     r"^http://localhost:\d+$",
#     r"^http://127\.0\.0\.1:\d+$",
#     r"^http://0\.0\.0\.0:\d+$",
# ]

# CORS 추가 헤더 허용
CORS_EXPOSE_HEADERS = [
    'content-type',
    'content-disposition',
    'x-total-count',
    'x-page-count',
]

# CORS 허용 헤더
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

# CORS 허용 메서드
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]


# Application definition

INSTALLED_APPS = [
    "core",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'drf_spectacular',
    'corsheaders',
]

# REST Framework 설정
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
}

# Spectacular 설정
SPECTACULAR_SETTINGS = {
    'TITLE': 'InfoBridge API',
    'DESCRIPTION': '''
    # InfoBridge 프로젝트 관리 API
    
    ## 주요 기능
    - **프로젝트 관리**: 프로젝트 생성, 수정, 삭제
    - **자료 관리**: GitHub, Slack, Jira, Gmail 자료 연동
    - **콘텐츠 관리**: 아이템과 요약 관리
    - **외부 데이터 매칭**: 키워드/코드 기반 외부 데이터 매칭
    - **추천 관리**: AI 기반 추천 시스템
    
    ## API 그룹
    - 🏗️ **프로젝트 관리**: 프로젝트 CRUD 및 관련 자료 조회
    - 📁 **자료 관리**: 프로젝트 자료 관리
    - 🤖 **AI 관리**: AI 요청 처리
    - 📝 **콘텐츠 관리**: 아이템과 요약 관리
    - 🔍 **외부 데이터 매칭**: 외부 API 데이터 매칭
    - ⭐ **추천 관리**: 추천 시스템 관리
    ''',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    'COMPONENT_SPLIT_REQUEST': True,
    'SCHEMA_PATH_PREFIX': '/api/',
    'TAGS': [
        {'name': '프로젝트 관리', 'description': '프로젝트 생성, 수정, 삭제 및 관련 자료 조회'},
        {'name': '자료 관리', 'description': 'GitHub, Slack, Jira, Gmail 등 프로젝트 자료 관리'},
        {'name': 'AI 관리', 'description': 'AI 요청 처리 및 관리'},
        {'name': '콘텐츠 관리', 'description': '아이템과 요약 콘텐츠 관리'},
        {'name': '외부 데이터 매칭', 'description': '키워드/코드 기반 외부 데이터 매칭 및 아이템 생성'},
        {'name': '추천 관리', 'description': 'AI 기반 추천 시스템 관리'},
    ],
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': True,
        'filter': True,
        'showExtensions': True,
        'showCommonExtensions': True,
    },
    'REDOC_UI_SETTINGS': {
        'hideDownloadButton': False,
        'hideHostname': False,
        'hideLoading': False,
        'nativeScrollbars': False,
        'pathInMiddlePanel': True,
        'requiredPropsFirst': True,
        'scrollYOffset': 0,
        'showExtensions': True,
        'sortPropsAlphabetically': True,
        'suppressWarnings': False,
        'theme': {
            'colors': {
                'primary': {
                    'main': '#1890ff'
                }
            }
        }
    }
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',  # CORS 미들웨어 (최상단에 위치)
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
